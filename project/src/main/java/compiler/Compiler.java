/*
 * This Java source file was generated by the Gradle 'init' task.
 */

// LINFO2132 - Project
// @authors - HÃ©ctor Varela and Paloma Bas
// UCLouvain - 2023/24

package compiler;

import compiler.Lexer.Lexer;
import compiler.Lexer.Symbol;
import compiler.Parser.Parser;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class Compiler {

    public static void main(String[] args) throws IOException {

        InputStreamReader reader = null;
        int printmode = 0;

        // Symbol Table
        ArrayList<Symbol> symbols = new ArrayList<>();

        if(args.length == 0) {
            System.out.println("Error: please include the file to parse\n");
            System.exit(-1);
        }
        else if(args.length == 1) {
            reader = new InputStreamReader(new FileInputStream(args[0]));
        }
        else if(args.length == 2) {
            if(!args[0].equals("-lexer")) {
                System.out.println("Error: argument not recognised\n");
                System.exit(-1);
            }
            printmode = 1;
            reader = new InputStreamReader(new FileInputStream(args[1]));
        }

        // Create the lexer
        Lexer lexer = new Lexer(reader);

        // Create the parser
        Parser parser = new Parser(lexer);

        // Call getNextSymbol() until EOF or error
        while(true) {
            Symbol s = lexer.getNextSymbol();
            if(s != null) { // If not a whitespace, which is ignored and we return null in
                symbols.add(s);
                if(s.getToken().equals("Error") || s.getToken().equals("EOF")) { break; }
            }
        }

        if(printmode == 1) {
            for(int i = 0; i < symbols.size(); i++) {
                System.out.println(symbols.get(i));
            }
        }
    }
}
